import 'dart:math';

import 'package:flutter/material.dart';
import 'package:ictis_schedule/time/is_current_subject.dart';
import 'package:ictis_schedule/widgets/home/homeWidget/home_widget_modal.dart';
import 'package:ictis_schedule/widgets/subject_list/calculate_progress.dart';
import 'package:ictis_schedule/widgets/subject_list/subject_body_widget.dart';

class CurrentDaySubjectsListWidget extends StatelessWidget {
  final dayIndex;
  const CurrentDaySubjectsListWidget({super.key, required this.dayIndex});

  String getRandomPhrase() {
  final randomPhrases = [
    "–£ –≤–∞—Å –≤—ã—Ö–æ–¥–Ω–æ–π! –í—Ä–µ–º—è –¥–ª—è Netflix –∏ –º–∏—Ä–æ–≤–æ–≥–æ –≥–æ—Å–ø–æ–¥—Å—Ç–≤–∞ üçø",
    "–ü–∞—Ä –Ω–µ—Ç? –ó–Ω–∞—á–∏—Ç, —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –¥–ª—è –∫–æ—Ñ–µ –∏ –ø–ª–µ–¥–∞ ‚òï",
    "–ü—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Ö–æ–ª—Å—Ç, –∞ –≤—ã ‚Äî —Ö—É–¥–æ–∂–Ω–∏–∫ —Å–≤–æ–µ–≥–æ –¥–Ω—è üé®‚ú®",
    "–ù–µ—Ç –ø–∞—Ä? –ó–Ω–∞—á–∏—Ç, –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä –∏ –≤–µ–ª–∏–∫–∏—Ö –ø–æ–±–µ–¥! üéÆ",
    "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø–∞—Ä! –í—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è, –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è üöÄ",
    "–ü–∞—Ä –Ω–µ—Ç, –∞ –∑–Ω–∞—á–∏—Ç ‚Äî –≤—Ä–µ–º—è –¥–ª—è —á–∏–ø—Å–æ–≤, –º—É–∑—ã–∫–∏ –∏ –º–µ–º–æ–≤ üòé",
    "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–Ω—è: –∏–∑—É—á–∏—Ç—å, –∫–∞–∫ –¥–æ–ª–≥–æ –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å, –Ω–µ –Ω–∞—Ä—É—à–∞—è –∑–∞–∫–æ–Ω—ã —Ñ–∏–∑–∏–∫–∏ ‚öõÔ∏è",
    "–í—ã—Ö–æ–¥–Ω–æ–π? –ó–Ω–∞—á–∏—Ç, –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫, —Å–µ–ª—Ñ–∏ –∏ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π üì∏",
    "–£ –≤–∞—Å –≤—ã—Ö–æ–¥–Ω–æ–π! –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º üõãÔ∏è",
    "–ü—É—Å—Ç–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ–ª, –∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ–Ω—å —Å–º—ã—Å–ª–æ–º üåå",
    "–í—ã—Ö–æ–¥–Ω–æ–π!? –ó–Ω–∞—á–∏—Ç –ø–æ—Ä–∞ –≤ –∫–∞—á–∞–ª–∫—É –∫ –ü–∞–≤–ª—É –ë—ç—Ä—É!!!"

  ];

  return randomPhrases[Random().nextInt(randomPhrases.length)];
}

  @override
  Widget build(BuildContext context) {
    final model = ScheduleModelProvider.of(context)?.model;

    if (model?.table == null || model == null) {
      return Center(child: CircularProgressIndicator());
    }
    final subjects = model.table!.getCurrentDay(dayIndex);
    final countSubject = subjects.length;
    final subjectTime = model.table!.getSubjectsTime();
    if (countSubject == 0) {
      return Padding(
        padding: const EdgeInsets.all(8.0),
        child: Text(
          getRandomPhrase(), 
          style: Theme.of(context).textTheme.bodyLarge,
        ),
      );
    }
    return ListView.builder(
      itemCount: countSubject,
      itemBuilder: (context, index) {
        return Card(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
            side: BorderSide(
              color: isCurrentSubject(subjectTime[index]),
              width: 2,
            ),
          ),
          
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Stack(children: [
              SubjectBodyWidget(
                  subjectTime: subjectTime[index], subject: subjects[index], viewProgress: true,),
              Positioned(
                  right: 0,
                  child: Text(
                    "${index + 1}-—è",
                    style: Theme.of(context).textTheme.bodyLarge,
                  )),
            ]),
          ),
        );
      },
    );
  }
}

class SubjectTimeProgressWidget extends StatelessWidget {
  final subjectTime;
  
  const SubjectTimeProgressWidget({
    super.key,
    required this.subjectTime
  });

  @override
  Widget build(BuildContext context) {
    if (subjectTime == null){
      return SizedBox();
    }
    return LinearProgressIndicator(
        value: calculateProgress(subjectTime), // –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ—Ç 0 –¥–æ 1)
        color: Colors.green, 
        backgroundColor: Colors.grey[450], 
        minHeight: 2, 
        borderRadius: BorderRadius.circular(2), 
      );
  }
}
